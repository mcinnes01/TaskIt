@model TaskIt.Models.TaskViewModels.TaskViewModel
@using TaskIt.Helpers

@{
    ViewData["Title"] = "Details";
    string colour = !string.IsNullOrEmpty(Model?.Category?.Colour) ? Model.Category.Colour : "";
}

@if (!Context.Request.IsAjaxRequest())
{
    <h2>Details</h2>
}

<div>
    @if (!Context.Request.IsAjaxRequest())
    {
        <h4>Task</h4>
        <hr />
    }
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Body)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Body)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Category)
        </dt>
        <dd style="background-color: @colour">
            @Html.DisplayFor(model => model.Category.Title)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Created)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Created)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.State)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.State)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.UserName)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.UserName)
        </dd>
    </dl>
</div>

@if (!Context.Request.IsAjaxRequest())
{
    <div>
        <a asp-action="Edit" asp-route-id="@Model.TaskId">Edit</a> |
        <a asp-action="Index">Back to List</a>
    </div>
}